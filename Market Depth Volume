    let getMarketDepthVolume (betType : BetType) count =
        let priceGridData = selection.PriceGridData.DataContext
        let startIndex, nextIndex, findFun =
            if betType = BetType.Back
            then
                priceGridData.BestToLayIndex, -1, (fun (priceData : PriceData) -> priceData.ToLay > 0.0)
            else
                priceGridData.BestToBackIndex, +1, (fun (priceData : PriceData) -> priceData.ToBack > 0.0)

        let mutable doLoop = true
        let mutable index = startIndex
        let mutable volume = 0.0
        let mutable count = count

        while doLoop do
            if index > 0 && index < OddsData.NumberOfOdds
            then
                let priceData = priceGridData.GetPriceData(index)

                if findFun priceData
                then
                    count <- count - 1
                    if count = 0 && betType = BetType.Back
                    then
                     volume <- priceData.BackOrderSize
                     doLoop <- false

                     elif count = 0 && betType = BetType.Back
                     then
                       volume <- priceData.LayOrderSize
                       doLoop <- false
                else
                    index <- index + nextIndex
            else
                doLoop <- false

        if volume > 0.0
        then
            None
        else
            Some volume
